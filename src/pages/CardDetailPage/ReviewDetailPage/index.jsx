// src/pages/ReviewDetailPage.jsx
import React, { useMemo, useState } from "react";
import { Star, MoreHorizontal, ThumbsUp, MessageCircle, Check } from "lucide-react";
import { Link, useLocation, useParams } from "react-router-dom";
import CustomerSideBar from "@layout/SideBar";
import { endPoint } from "@routes/router";

/** ===== Mock/fallback (s·∫Ω d√πng khi kh√¥ng truy·ªÅn state) ===== */
const fallbackRestaurant = {
  id: 1,
  name: "Pizza 4P's",
  thumbnail:
    "https://images.unsplash.com/photo-1513104890138-7c749659a591?w=100&h=100&fit=crop",
  rating: 4.8,
  totalReviews: 912,
};

const fallbackReviews = [
  {
    id: 101,
    author: {
      name: "Ho√†ng Nam",
      avatar:
        "https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=40&h=40&fit=crop&crop=face",
      verified: true,
    },
    rating: 5,
    timeAgo: "1 th√°ng tr∆∞·ªõc",
    content:
      "ƒê√¢y l√† l·∫ßn th·ª© 3 t√¥i ƒë·∫øn Pizza 4P's v√† l·∫ßn n√†o c≈©ng h√†i l√≤ng. L·∫ßn n√†y th·ª≠ Spaghetti Carbonara - tuy·ªát v·ªùi! Pasta al dente, s·ªët kem b√©o ng·∫≠y v·ª´a ph·∫£i. Tiramisu v·∫´n l√† m√≥n tr√°ng mi·ªáng y√™u th√≠ch. S·∫Ω ti·∫øp t·ª•c ·ªßng h·ªô!",
    images: [
      "https://images.unsplash.com/photo-1543353071-10c8ba85a904?w=240&h=160&fit=crop",
      "https://images.unsplash.com/photo-1571877227200-a0d98ea607e9?w=240&h=160&fit=crop",
    ],
    likes: 35,
    replies: [
      {
        id: "r1",
        author: {
          name: "Pizza 4P's",
          isRestaurant: true,
          avatar:
            "https://images.unsplash.com/photo-1513104890138-7c749659a591?w=40&h=40&fit=crop",
        },
        timeAgo: "3 tu·∫ßn tr∆∞·ªõc",
        content:
          "C·∫£m ∆°n anh Nam ƒë√£ g√≥p √Ω! Ch√∫ng t√¥i s·∫Ω c·ªë g·∫Øng c·∫£i thi·ªán kh√¥ng gian ƒë·ªÉ t·∫°o m√¥i tr∆∞·ªùng tho·∫£i m√°i h∆°n cho kh√°ch h√†ng. Hy v·ªçng ƒë∆∞·ª£c ph·ª•c v·ª• anh l·∫ßn t·ªõi! üòä",
      },
    ],
  },
  {
    id: 102,
    author: {
      name: "Mai Linh",
      avatar:
        "https://images.unsplash.com/photo-1531123897727-8f129e1688ce?w=40&h=40&fit=crop&crop=face",
    },
    rating: 3,
    timeAgo: "1 th√°ng tr∆∞·ªõc",
    content:
      "H∆°i th·∫•t v·ªçng v·ªõi l·∫ßn n√†y. Pizza ƒë·∫øn mu·ªôn 30 ph√∫t so v·ªõi d·ª± ki·∫øn, v√† khi ƒë·∫øn th√¨ ƒë√£ h∆°i ngu·ªôi. V·ªã v·∫´n ok nh∆∞ng tr·∫£i nghi·ªám kh√¥ng t·ªët l·∫Øm. Hy v·ªçng l·∫ßn sau s·∫Ω t·ªët h∆°n.",
    images: [],
    likes: 20,
    replies: [
      {
        id: "r2",
        author: {
          name: "Pizza 4P's",
          isRestaurant: true,
          avatar:
            "https://images.unsplash.com/photo-1513104890138-7c749659a591?w=40&h=40&fit=crop",
        },
        timeAgo: "1 th√°ng tr∆∞·ªõc",
        content:
          "Ch√∫ng t√¥i r·∫•t xin l·ªói v√¨ tr·∫£i nghi·ªám kh√¥ng t·ªët n√†y! ƒê√¢y kh√¥ng ph·∫£i l√† ti√™u chu·∫©n d·ªãch v·ª• c·ªßa ch√∫ng t√¥i. Ch√∫ng t√¥i ƒë√£ ghi nh·∫≠n v√† s·∫Ω c·∫£i thi·ªán quy tr√¨nh ƒë·ªÉ tr√°nh t√¨nh tr·∫°ng n√†y. Mong ƒë∆∞·ª£c ph·ª•c v·ª• ch·ªã t·ªët h∆°n l·∫ßn sau! üôè",
      },
    ],
  },
];

/** ===== Small UI bits ===== */
const Stars = ({ value = 0, size = 16 }) => (
  <div className="flex">
    {[...Array(5)].map((_, i) => (
      <Star
        key={i}
        size={size}
        className={`${i < value ? "text-yellow-400 fill-current" : "text-gray-300"}`}
      />
    ))}
  </div>
);

const FilterPill = ({ active, children, onClick }) => (
  <button
    onClick={onClick}
    className={`px-3 py-1.5 rounded-full text-sm border transition-colors ${
      active
        ? "bg-pink-50 text-pink-600 border-pink-200"
        : "bg-white text-gray-600 border-gray-200 hover:bg-gray-50"
    }`}
  >
    {children}
  </button>
);

const ActionBtn = ({ icon, children }) => (
  <button className="flex items-center gap-1.5 text-gray-500 hover:text-pink-600 text-sm">
    {icon}
    <span>{children}</span>
  </button>
);

/** ===== Review item ===== */
const ReviewCard = ({ review }) => {
  const author = review?.author || { name: "·∫®n danh", avatar: "" };
  return (
    <div className="bg-white rounded-2xl border border-gray-100 p-5">
      <div className="flex items-start gap-3">
        <img
          src={author.avatar}
          alt={author.name}
          className="w-10 h-10 rounded-full object-cover bg-gray-100"
        />
        <div className="flex-1">
          <div className="flex items-center gap-2">
            <span className="font-semibold text-gray-900">{author.name}</span>
            {author.verified && (
              <span className="inline-flex items-center gap-1 text-xs text-blue-600">
                <Check size={14} /> ƒê√£ x√°c minh
              </span>
            )}
            <span className="text-sm text-gray-500">‚Ä¢ {review.timeAgo}</span>
          </div>

          <div className="mt-1">
            <Stars value={review.rating} />
          </div>

          <p className="text-gray-700 mt-3">{review.content}</p>

          {!!review.images?.length && (
            <div className="flex gap-2 mt-3">
              {review.images.map((src, i) => (
                <img
                  key={i}
                  src={src}
                  alt="review"
                  className="w-28 h-20 object-cover rounded-lg border border-gray-100"
                />
              ))}
            </div>
          )}

          <div className="flex items-center gap-5 mt-3">
            <ActionBtn icon={<ThumbsUp size={16} />}>H·ªØu √≠ch ({review.likes})</ActionBtn>
            <ActionBtn icon={<MessageCircle size={16} />}>Tr·∫£ l·ªùi</ActionBtn>
          </div>

          {/* Replies (restaurant) */}
          {!!review.replies?.length && (
            <div className="mt-4 space-y-3">
              {review.replies.map((rep, idx) => {
                // ‚õëÔ∏è Ph√≤ng th·ªß: rep c√≥ th·ªÉ l√† s·ªë ID ‚Üí b·ªè qua n·∫øu kh√¥ng tra ƒë∆∞·ª£c object
                if (!rep || typeof rep !== "object" || !rep.author) return null;
                return (
                  <div
                    key={rep.id ?? idx}
                    className="ml-0 md:ml-12 p-4 rounded-xl border border-pink-200 bg-pink-50/40"
                  >
                    <div className="flex items-start gap-3">
                      <img
                        src={rep.author.avatar}
                        alt={rep.author.name}
                        className="w-8 h-8 rounded-full object-cover bg-gray-100"
                      />
                      <div className="flex-1">
                        <div className="flex items-center gap-2">
                          <span className="font-semibold text-gray-900">{rep.author.name}</span>
                          {rep.author.isRestaurant && (
                            <span className="px-2 py-0.5 bg-pink-100 text-pink-600 rounded text-xs font-medium">
                              Ch·ªß nh√† h√†ng
                            </span>
                          )}
                          <span className="text-xs text-gray-500">‚Ä¢ {rep.timeAgo}</span>
                        </div>
                        <p className="text-gray-700 mt-1">{rep.content}</p>
                      </div>
                      <MoreHorizontal size={18} className="text-gray-400" />
                    </div>
                  </div>
                );
              })}
            </div>
          )}
        </div>

        <MoreHorizontal size={18} className="text-gray-400" />
      </div>
    </div>
  );
};

/** ===== Page ===== */
function ReviewDetailPage() {
  const { id } = useParams();
  const location = useLocation();

  // reviews t·ª´ state c√≥ th·ªÉ ·ªü 2 d·∫°ng:
  // A) [{... review, replies: [{...}, {...}] }]
  // B) [{... review, replies: [2]}, {... id:2, isReply:true, author:{...}}]
  const rawReviews = location.state?.reviews || fallbackReviews;

  // Chu·∫©n ho√°: bi·∫øn replies d·∫°ng ID -> object, v√† lo·∫°i c√°c item top-level l√† reply
  const normalized = useMemo(() => {
    if (!Array.isArray(rawReviews)) return [];

    const byId = new Map(rawReviews.map((r) => [r.id, r]));

    return rawReviews
      .map((r) => {
        if (Array.isArray(r.replies) && r.replies.length) {
          const expanded = r.replies
            .map((x) => (typeof x === "object" ? x : byId.get(x)))
            .filter(Boolean)
            .map((x) => ({ ...x, isReply: true })); // ƒë·∫£m b·∫£o l√† reply
          return { ...r, replies: expanded };
        }
        return r;
      })
      .filter((r) => !r.isReply); // b·ªè c√°c ph·∫ßn t·ª≠ reply ·ªü level 1
  }, [rawReviews]);

  const restaurant =
    location.state?.restaurant || { ...fallbackRestaurant, id: id || fallbackRestaurant.id };

  const [filter, setFilter] = useState("all");
  const [onlyWithImages, setOnlyWithImages] = useState(false);
  const [visible, setVisible] = useState(5);

  const filtered = useMemo(() => {
    return normalized.filter((r) => {
      const starOk = filter === "all" ? true : r.rating === Number(filter);
      const imgOk = onlyWithImages ? (r.images?.length || 0) > 0 : true;
      return starOk && imgOk;
    });
  }, [normalized, filter, onlyWithImages]);

  return (
    <div className="bg-gray-50 min-h-screen">
      <CustomerSideBar />

      <main className="lg:ml-20">
        <div className="max-w-4xl mx-auto px-6 py-6">
          {/* Header */}
          <div className="mb-6">
            <div className="flex items-center gap-3">
              <img
                src={restaurant.thumbnail}
                alt={restaurant.name}
                className="w-12 h-12 rounded-xl object-cover"
              />
              <div>
                <h1 className="text-2xl font-bold text-gray-900">T·∫•t c·∫£ ƒë√°nh gi√°</h1>
                <div className="flex items-center gap-2 text-sm text-gray-600">
                  <span className="font-medium">{restaurant.name}</span>
                  <span>‚Ä¢</span>
                  <Stars value={Math.round(restaurant.rating || 5)} size={14} />
                  <span>({restaurant.totalReviews} ƒë√°nh gi√°)</span>
                </div>
              </div>
            </div>
          </div>

          {/* Filters */}
          <div className="bg-white rounded-2xl border border-gray-100 p-4 mb-6">
            <div className="flex flex-wrap gap-2">
              {["all", 5, 4, 3, 2, 1].map((k) => (
                <FilterPill
                  key={k}
                  active={filter === String(k)}
                  onClick={() => setFilter(String(k))}
                >
                  {k === "all" ? "T·∫•t c·∫£" : `${k} sao`}
                </FilterPill>
              ))}
              <FilterPill
                active={onlyWithImages}
                onClick={() => setOnlyWithImages((s) => !s)}
              >
                C√≥ h√¨nh ·∫£nh
              </FilterPill>
            </div>
          </div>

          {/* List */}
          <div className="space-y-4">
            {filtered.slice(0, visible).map((rv) => (
              <ReviewCard key={rv.id} review={rv} />
            ))}
          </div>

          {/* Load more */}
          {visible < filtered.length && (
            <div className="flex justify-center mt-6">
              <button
                onClick={() => setVisible((v) => v + 5)}
                className="px-5 py-2 rounded-xl border border-gray-200 bg-white text-gray-700 hover:bg-gray-50"
              >
                Xem th√™m ƒë√°nh gi√°
              </button>
            </div>
          )}

          {/* Back to restaurant */}
          <div className="flex justify-center mt-8">
            <Link
              to={endPoint.RESTAURANT_DETAIL(restaurant.id)}
              state={{ restaurant }}
              className="text-pink-600 hover:text-pink-700 font-medium"
            >
              ‚Üê Quay l·∫°i trang nh√† h√†ng
            </Link>
          </div>
        </div>
      </main>
    </div>
  );
}

export default ReviewDetailPage;
